{
    "metadata": {
        "kernelspec": {
            "name": "SQL",
            "display_name": "SQL",
            "language": "sql"
        },
        "language_info": {
            "name": "sql",
            "version": ""
        }
    },
    "nbformat_minor": 2,
    "nbformat": 4,
    "cells": [
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum\n",
                "\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer1 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=1 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=1 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;"
            ],
            "metadata": {
                "azdata_cell_guid": "c61e5401-3241-433e-a75b-05d6b50f4d77",
                "language": "sql"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(36468 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:23.520"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 8
        },
        {
            "cell_type": "markdown",
            "source": [
                "Running the spatial intersect with one spatial index takes 23 sec!"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "7b69faf2-c504-42cc-8dc2-38803c0800d1"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "Use MouseIleum\n",
                "SELECT MAX(x_pixel) as max_x, MAX(y_pixel) as max_y, MIN(x_pixel) as min_x, MIN(y_pixel) as min_y FROM MoleculesWithPoints;\n",
                "SELECT MAX(x), MAX(y), MIN(x), MIN(y) FROM Cells;"
            ],
            "metadata": {
                "azdata_cell_guid": "4dcfab7f-7a8c-48d6-bed5-d38ca6eed438",
                "language": "sql"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(1 row affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(1 row affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:00.244"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "execute_result",
                    "metadata": {},
                    "execution_count": 1,
                    "data": {
                        "application/vnd.dataresource+json": {
                            "schema": {
                                "fields": [
                                    {
                                        "name": "max_x"
                                    },
                                    {
                                        "name": "max_y"
                                    },
                                    {
                                        "name": "min_x"
                                    },
                                    {
                                        "name": "min_y"
                                    }
                                ]
                            },
                            "data": [
                                {
                                    "0": "5720",
                                    "1": "9391",
                                    "2": "112",
                                    "3": "0"
                                }
                            ]
                        },
                        "text/html": [
                            "<table>",
                            "<tr><th>max_x</th><th>max_y</th><th>min_x</th><th>min_y</th></tr>",
                            "<tr><td>5720</td><td>9391</td><td>112</td><td>0</td></tr>",
                            "</table>"
                        ]
                    }
                },
                {
                    "output_type": "execute_result",
                    "metadata": {},
                    "execution_count": 1,
                    "data": {
                        "application/vnd.dataresource+json": {
                            "schema": {
                                "fields": [
                                    {
                                        "name": "(No column name)"
                                    },
                                    {
                                        "name": "(No column name)"
                                    },
                                    {
                                        "name": "(No column name)"
                                    },
                                    {
                                        "name": "(No column name)"
                                    }
                                ]
                            },
                            "data": [
                                {
                                    "0": "5722",
                                    "1": "9393",
                                    "2": "621",
                                    "3": "3"
                                }
                            ]
                        },
                        "text/html": [
                            "<table>",
                            "<tr><th>(No column name)</th><th>(No column name)</th><th>(No column name)</th><th>(No column name)</th></tr>",
                            "<tr><td>5722</td><td>9393</td><td>621</td><td>3</td></tr>",
                            "</table>"
                        ]
                    }
                }
            ],
            "execution_count": 1
        },
        {
            "cell_type": "code",
            "source": [
                "CREATE SPATIAL INDEX PolygonInd ON\n",
                "   [MouseIleum].[dbo].[MoleculesWithPoints](point)\n",
                "   WITH (GRIDS = (HIGH, HIGH, HIGH, HIGH), \n",
                "        BOUNDING_BOX = (XMIN = 112,YMIN = 0,XMAX = 5722, YMAX = 9393))"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "b75c28ce-752b-4328-9c36-3ae7e3a3c757"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Commands completed successfully."
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:08.363"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 4
        },
        {
            "cell_type": "code",
            "source": [
                "USe MouseIleum\n",
                "SELECT COUNT(id) as total, COUNT(Distinct id) FROM CellPolygons;"
            ],
            "metadata": {
                "azdata_cell_guid": "2c625b48-8afe-4563-bcd1-7ebd4bb99486",
                "language": "sql"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(1 row affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:00.141"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "execute_result",
                    "metadata": {},
                    "execution_count": 9,
                    "data": {
                        "application/vnd.dataresource+json": {
                            "schema": {
                                "fields": [
                                    {
                                        "name": "total"
                                    },
                                    {
                                        "name": "(No column name)"
                                    }
                                ]
                            },
                            "data": [
                                {
                                    "0": "33861",
                                    "1": "33861"
                                }
                            ]
                        },
                        "text/html": [
                            "<table>",
                            "<tr><th>total</th><th>(No column name)</th></tr>",
                            "<tr><td>33861</td><td>33861</td></tr>",
                            "</table>"
                        ]
                    }
                }
            ],
            "execution_count": 9
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum\n",
                "ALTER TABLE CellPolygons\n",
                "ALTER COLUMN \n",
                "    id int NOT NULL;"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "c4303252-d68a-4632-a25f-e3ce8f5a99c4"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Commands completed successfully."
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:00.220"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 22
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum\n",
                "ALTER TABLE CellPolygons\n",
                "ADD CONSTRAINT polygons_id_primary_key PRIMARY KEY(id);"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "224f645f-9b31-400c-a3e5-a284ca1dc040"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Commands completed successfully."
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:05.787"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 23
        },
        {
            "cell_type": "code",
            "source": [
                "CREATE SPATIAL INDEX PolygonInd ON\n",
                "   [MouseIleum].[dbo].[CellPolygons](polygon)\n",
                "   WITH (GRIDS = (HIGH, HIGH, HIGH, HIGH), \n",
                "        BOUNDING_BOX = (XMIN = 112,YMIN = 0,XMAX = 5722, YMAX = 9393));"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "beea7b86-26a9-4f29-adf4-366c3b6cb2fc"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Commands completed successfully."
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:03.498"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 24
        },
        {
            "cell_type": "markdown",
            "source": [
                "So now to do it for all the layers, and calculate average amount of time"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "31e24cbf-243c-4943-a3cf-75e237c3b4ed"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "DECLARE @startTime DATETIME\n",
                "declare @endTime DATETIME\n",
                "Set @starttime = getdate()\n",
                "\n",
                "-- do the code\n",
                "USE MouseIleum;\n",
                "DROP TABLE IF EXISTS MoleculeCountsLayer1;\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer1 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=1 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=1 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;\n",
                "\n",
                "Set @endTime = GETDATE()\n",
                "SELECT @EndTime - @StartTime;\n",
                "\n",
                "GO 5"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "556acb58-9288-41de-9635-043e19ebc322"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Beginning execution loop"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(36468 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(1 row affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(36468 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(1 row affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(36468 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(1 row affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(36468 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(1 row affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(36468 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(1 row affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Batch execution completed 5 times..."
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:01:52.393"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "execute_result",
                    "metadata": {},
                    "execution_count": 34,
                    "data": {
                        "application/vnd.dataresource+json": {
                            "schema": {
                                "fields": [
                                    {
                                        "name": "(No column name)"
                                    }
                                ]
                            },
                            "data": [
                                {
                                    "0": "1900-01-01 00:00:24.463"
                                }
                            ]
                        },
                        "text/html": [
                            "<table>",
                            "<tr><th>(No column name)</th></tr>",
                            "<tr><td>1900-01-01 00:00:24.463</td></tr>",
                            "</table>"
                        ]
                    }
                },
                {
                    "output_type": "execute_result",
                    "metadata": {},
                    "execution_count": 34,
                    "data": {
                        "application/vnd.dataresource+json": {
                            "schema": {
                                "fields": [
                                    {
                                        "name": "(No column name)"
                                    }
                                ]
                            },
                            "data": [
                                {
                                    "0": "1900-01-01 00:00:23.147"
                                }
                            ]
                        },
                        "text/html": [
                            "<table>",
                            "<tr><th>(No column name)</th></tr>",
                            "<tr><td>1900-01-01 00:00:23.147</td></tr>",
                            "</table>"
                        ]
                    }
                },
                {
                    "output_type": "execute_result",
                    "metadata": {},
                    "execution_count": 34,
                    "data": {
                        "application/vnd.dataresource+json": {
                            "schema": {
                                "fields": [
                                    {
                                        "name": "(No column name)"
                                    }
                                ]
                            },
                            "data": [
                                {
                                    "0": "1900-01-01 00:00:21.557"
                                }
                            ]
                        },
                        "text/html": [
                            "<table>",
                            "<tr><th>(No column name)</th></tr>",
                            "<tr><td>1900-01-01 00:00:21.557</td></tr>",
                            "</table>"
                        ]
                    }
                },
                {
                    "output_type": "execute_result",
                    "metadata": {},
                    "execution_count": 34,
                    "data": {
                        "application/vnd.dataresource+json": {
                            "schema": {
                                "fields": [
                                    {
                                        "name": "(No column name)"
                                    }
                                ]
                            },
                            "data": [
                                {
                                    "0": "1900-01-01 00:00:22.050"
                                }
                            ]
                        },
                        "text/html": [
                            "<table>",
                            "<tr><th>(No column name)</th></tr>",
                            "<tr><td>1900-01-01 00:00:22.050</td></tr>",
                            "</table>"
                        ]
                    }
                },
                {
                    "output_type": "execute_result",
                    "metadata": {},
                    "execution_count": 34,
                    "data": {
                        "application/vnd.dataresource+json": {
                            "schema": {
                                "fields": [
                                    {
                                        "name": "(No column name)"
                                    }
                                ]
                            },
                            "data": [
                                {
                                    "0": "1900-01-01 00:00:21.087"
                                }
                            ]
                        },
                        "text/html": [
                            "<table>",
                            "<tr><th>(No column name)</th></tr>",
                            "<tr><td>1900-01-01 00:00:21.087</td></tr>",
                            "</table>"
                        ]
                    }
                }
            ],
            "execution_count": 34
        },
        {
            "cell_type": "markdown",
            "source": [
                "For the layer 1, the average execution time was **22.461 seconds**!"
            ],
            "metadata": {
                "azdata_cell_guid": "2716844c-8c3b-4a9a-98a6-eecc00f2f29d"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum;\n",
                "DROP TABLE IF EXISTS MoleculeCountsLayer2;\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer2 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=2 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=2 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;"
            ],
            "metadata": {
                "azdata_cell_guid": "6a7946b1-688f-415d-9294-54ba6f621e79",
                "language": "sql"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(40043 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:30.022"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 36
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum;\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer3 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=3 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=3 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "5d1fff37-cda3-4e9c-992c-ca648a7eb17b"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(41894 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:29.948"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 37
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum;\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer4 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=4 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=4 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "b1da08bc-6009-40e1-ae56-28a154c7afb4"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(41704 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:31.495"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 38
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum;\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer5 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=5 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=5 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "cd9984ba-5f1e-4fc7-9641-f95c5f7f585f"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(39828 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:32.051"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 39
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum;\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer6 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=6 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=6 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "0cdc3b89-0b36-465a-b6d0-9901a78d8230"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(35620 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:30.217"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 40
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum;\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer7 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=7 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=7 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "90e28664-a6f5-4f51-a329-74f8d624e832"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(29687 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:32.266"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 41
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum;\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer8 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=8 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=8 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "30dd4011-46d9-4c3b-8617-46cef65e0282"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(23262 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:26.803"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 42
        },
        {
            "cell_type": "code",
            "source": [
                "USE MouseIleum;\n",
                "SELECT mol.gene, COUNT(mol.molecule_id) as molecule_count, poly.cell INTO MoleculeCountsLayer9 FROM (\n",
                "    SELECT * FROM [MouseIleum].[dbo].[MoleculesWithPoints] \n",
                "        WHERE z_layer=9 ) as mol\n",
                "    INNER JOIN (   \n",
                "        SELECT * FROM [MouseIleum].[dbo].[CellPolygons] \n",
                "        WHERE z=9 ) as poly\n",
                "    ON poly.polygon.STIntersects(mol.point) = 1 -- =1 is needed bc output is 0 or 1 instead of T/F\n",
                "    GROUP BY mol.gene , poly.cell;"
            ],
            "metadata": {
                "language": "sql",
                "azdata_cell_guid": "42782060-a5e7-475e-9dee-5108d5657372"
            },
            "outputs": [
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "(17125 rows affected)"
                    },
                    "metadata": {}
                },
                {
                    "output_type": "display_data",
                    "data": {
                        "text/html": "Total execution time: 00:00:20.279"
                    },
                    "metadata": {}
                }
            ],
            "execution_count": 43
        }
    ]
}